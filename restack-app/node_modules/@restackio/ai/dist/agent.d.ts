import { UpdateDefinition } from "@temporalio/client";
import { getExternalWorkflowHandle as getExternalAgentHandle, workflowInfo as agentInfo, continueAsNew, sleep, condition, uuid4 } from "@temporalio/workflow";
import { UpdateHandlerOptions } from "@temporalio/workflow/lib/interfaces";
import { QueryDefinition } from "@temporalio/client";
import { customLog, childExecute, childStart, step } from "./workflow";
/**
 * Define an event for an Agent.
 *
 * A definition is used to register an event listener in the Agent via onEvent and to send an event to an Agent using sendAgentEvent.
 * A definition can be reused in multiple Agents.
 */
export declare function defineEvent<Ret = void, Name extends string = string>(name: Name): UpdateDefinition<Ret, [Ret], Name>;
/**
 * Set a listener for an event in an Agent.
 *
 * If this is called multiple times for a given event the last handler will overwrite any previous calls.
 *
 * @param def an event definition as returned by {@link defineEvent}.
 * @param handler a compatible handler function for the given definition or `undefined` to unset the handler.
 * @param options an optional `description` of the handler and an optional update `validator` function.
 */
export declare function onEvent<Ret, Args extends any[], T extends UpdateDefinition<Ret, Args>>(def: T, handler: (args: Args[0]) => Promise<Ret> | Ret, options?: UpdateHandlerOptions<Args>): void;
export type AgentEvent = {
    name: string;
    input?: {
        [key: string]: any;
    };
};
export type SendAgentEvent = {
    event: AgentEvent;
    agent?: {
        agentId: string;
        runId?: string;
    };
};
/**
 * Define a state method for an agent.
 *
 * A definition is used to register a handler in the Agent via {@link setHandler} and to query a Agent using a {@link AgentHandle}.
 * A definition can be reused in multiple Agents.
 */
export declare function defineState<Ret = void, Name extends string = string>(name: Name): QueryDefinition<Ret, [Ret], Name>;
/**
 * Set a handler function for an Agent state.
 *
 * If this function is called multiple times for a given state name the last handler will overwrite any previous calls.
 *
 * @param def a state definition as returned by {@link defineState}.
 * @param handler a compatible handler function for the given definition or `undefined` to unset the handler.
 * @param options an optional `description` of the handler and an optional update `validator` function.
 */
export declare function handleState<Ret, Args extends any[], T extends QueryDefinition<Ret, Args>>(def: T, handler: (args: Args[0]) => Promise<Ret> | Ret, options?: UpdateHandlerOptions<Args>): void;
export { customLog as log, getExternalAgentHandle, agentInfo, continueAsNew, sleep, condition, uuid4 as uuid, childStart, childExecute, step, };
