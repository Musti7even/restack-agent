"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sleep = exports.heartbeat = exports.log = exports.FunctionFailure = exports.functionInfo = void 0;
exports.currentWorkflow = currentWorkflow;
const activity_1 = require("@temporalio/activity");
Object.defineProperty(exports, "functionInfo", { enumerable: true, get: function () { return activity_1.activityInfo; } });
const customLog = {
    log: (level, message, attrs = {}) => activity_1.log.log(level, message, Object.assign(Object.assign({}, attrs), { clientLog: true })),
    trace: (message, meta = {}) => activity_1.log.trace(message, Object.assign(Object.assign({}, meta), { clientLog: true })),
    debug: (message, meta = {}) => activity_1.log.debug(message, Object.assign(Object.assign({}, meta), { clientLog: true })),
    info: (message, meta = {}) => activity_1.log.info(message, Object.assign(Object.assign({}, meta), { clientLog: true })),
    warn: (message, meta = {}) => activity_1.log.warn(message, Object.assign(Object.assign({}, meta), { clientLog: true })),
    error: (message, meta = {}) => activity_1.log.error(message, Object.assign(Object.assign({}, meta), { clientLog: true })),
};
/**
 * FunctionFailure represents an application-specific failure in a function.
 *
 * @param message - The error message describing the failure
 * @param details - Optional additional details about the failure
 * @returns An ApplicationFailure instance
 */
exports.FunctionFailure = activity_1.ApplicationFailure;
/**
 * Log a message from within a function.
 */
exports.log = customLog;
/**
 * Send a heartbeat from a long-running function.
 *
 * @param details - Optional details to include with the heartbeat
 */
exports.heartbeat = activity_1.heartbeat;
/**
 * Pause the execution of a function for a specified duration.
 *
 * @param duration - The duration to sleep in milliseconds
 */
exports.sleep = activity_1.sleep;
/**
 * Get information about the current workflow run.
 *
 * @returns An Info object containing details about the current workflow
 */
function currentWorkflow() {
    return activity_1.Context.current().info;
}
