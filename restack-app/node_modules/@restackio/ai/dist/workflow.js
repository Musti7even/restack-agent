"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uuid = exports.sleep = exports.continueAsNew = exports.workflowInfo = exports.getExternalWorkflowHandle = exports.log = exports.customLog = void 0;
exports.addEngineIdPrefix = addEngineIdPrefix;
exports.getEngineIdFromClient = getEngineIdFromClient;
exports.childStart = childStart;
exports.childExecute = childExecute;
exports.step = step;
const workflow_1 = require("@temporalio/workflow");
Object.defineProperty(exports, "getExternalWorkflowHandle", { enumerable: true, get: function () { return workflow_1.getExternalWorkflowHandle; } });
Object.defineProperty(exports, "workflowInfo", { enumerable: true, get: function () { return workflow_1.workflowInfo; } });
Object.defineProperty(exports, "continueAsNew", { enumerable: true, get: function () { return workflow_1.continueAsNew; } });
Object.defineProperty(exports, "sleep", { enumerable: true, get: function () { return workflow_1.sleep; } });
Object.defineProperty(exports, "uuid", { enumerable: true, get: function () { return workflow_1.uuid4; } });
exports.customLog = {
    trace: (message, attrs = {}) => workflow_1.log.trace(message, Object.assign(Object.assign({}, attrs), { clientLog: true })),
    debug: (message, attrs = {}) => workflow_1.log.debug(message, Object.assign(Object.assign({}, attrs), { clientLog: true })),
    info: (message, attrs = {}) => workflow_1.log.info(message, Object.assign(Object.assign({}, attrs), { clientLog: true })),
    warn: (message, attrs = {}) => workflow_1.log.warn(message, Object.assign(Object.assign({}, attrs), { clientLog: true })),
    error: (message, attrs = {}) => workflow_1.log.error(message, Object.assign(Object.assign({}, attrs), { clientLog: true })),
};
exports.log = exports.customLog;
// Helper function to add engineId prefix
function addEngineIdPrefix(engineId, current) {
    return `${engineId}-${current}`;
}
// Function to get engineId from the parent
function getEngineIdFromClient() {
    var _a;
    return (_a = (0, workflow_1.workflowInfo)().memo.engineId) !== null && _a !== void 0 ? _a : "local";
}
/**
 * Starts a child agent or workflow
 * @param child The workflow or agent to execute as a child.
 * @param childId The workflowId or agentId of the child.
 * @param input The input to pass to the child.
 * @returns A promise that resolves to a ChildHandle for the started child.
 */
function childStart({ child, childId, input, options, }) {
    const engineId = getEngineIdFromClient();
    const prefixedOptions = Object.assign(Object.assign(Object.assign({}, options), { workflowId: addEngineIdPrefix(engineId, childId), searchAttributes: {
            engineId: [engineId],
        } }), (input && { args: [input] }));
    return (0, workflow_1.startChild)(child, prefixedOptions);
}
/**
 * Executes a child agent or workflow.
 * @param child The workflow or agent to execute as a child.
 * @param childId The workflowId or agentId of the child.
 * @param input The input to pass to the child.
 * @param options The options for the child.
 * @returns A promise that resolves to the result of the child.
 */
function childExecute({ child, childId, input, options, }) {
    const engineId = getEngineIdFromClient();
    const prefixedOptions = Object.assign(Object.assign(Object.assign({}, options), { workflowId: addEngineIdPrefix(engineId, childId), searchAttributes: {
            engineId: [engineId],
        } }), (input && { args: [input] }));
    return (0, workflow_1.executeChild)(child, prefixedOptions);
}
/**
 * A single step within an agent or workflow.
 * @param options The function options to use.
 * @example
 * ```typescript
 * const function = step({
 *   taskQueue: "custom-queue"
 *   scheduleToCloseTimeout: "5 minutes",
 * });
 * ```
 * @returns A function interface used to invoke functions.
 */
function step(options) {
    var _a;
    const defaultOptions = {
        scheduleToCloseTimeout: "2 minutes",
    };
    const mergedOptions = Object.assign(Object.assign(Object.assign({}, defaultOptions), options), { taskQueue: addEngineIdPrefix(getEngineIdFromClient(), (_a = options.taskQueue) !== null && _a !== void 0 ? _a : "restack") });
    return (0, workflow_1.proxyActivities)(mergedOptions);
}
