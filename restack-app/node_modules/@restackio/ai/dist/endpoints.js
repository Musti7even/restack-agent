"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClasses = getClasses;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const ts = __importStar(require("typescript"));
const observability_1 = require("./observability");
function extractTypeDetails(typeNode, sourceFile) {
    if (ts.isTypeReferenceNode(typeNode)) {
        const typeName = typeNode.typeName.getText(sourceFile);
        const typeDetails = { name: typeName, properties: [] };
        // Find the type alias or interface declaration
        const typeDeclaration = sourceFile.statements.find((statement) => (ts.isTypeAliasDeclaration(statement) ||
            ts.isInterfaceDeclaration(statement)) &&
            statement.name.text === typeName);
        if (typeDeclaration) {
            if (ts.isTypeAliasDeclaration(typeDeclaration) &&
                ts.isTypeLiteralNode(typeDeclaration.type)) {
                typeDeclaration.type.members.forEach((member) => {
                    if (ts.isPropertySignature(member) && member.type) {
                        const propertyName = member.name.getText(sourceFile);
                        const propertyType = member.type.getText(sourceFile);
                        typeDetails.properties.push({
                            name: propertyName,
                            type: propertyType,
                        });
                    }
                });
            }
            else if (ts.isInterfaceDeclaration(typeDeclaration)) {
                typeDeclaration.members.forEach((member) => {
                    if (ts.isPropertySignature(member) && member.type) {
                        const propertyName = member.name.getText(sourceFile);
                        const propertyType = member.type.getText(sourceFile);
                        typeDetails.properties.push({
                            name: propertyName,
                            type: propertyType,
                        });
                    }
                });
            }
        }
        return typeDetails;
    }
    return null;
}
function extractFunctionDetailsFromFile(filePath, typeChecker) {
    const fileContent = fs.readFileSync(filePath, "utf8");
    const sourceFile = ts.createSourceFile(filePath, fileContent, ts.ScriptTarget.Latest, true);
    const workflows = [];
    ts.forEachChild(sourceFile, (node) => {
        if (ts.isFunctionDeclaration(node) && node.name) {
            const workflowName = node.name.text;
            let inputType = null;
            let outputType = null;
            if (node.parameters.length > 0) {
                const paramType = node.parameters[0].type;
                if (paramType) {
                    inputType = extractTypeDetails(paramType, sourceFile);
                }
            }
            if (node.type) {
                outputType = extractTypeDetails(node.type, sourceFile);
            }
            workflows.push({ workflowName, inputType, outputType });
        }
    });
    return workflows;
}
function getClasses(type, inputPath, taskQueue) {
    let directoryPath;
    // Determine if the input path is a file or directory
    if (fs.statSync(inputPath).isFile()) {
        directoryPath = path.dirname(inputPath);
    }
    else if (fs.statSync(inputPath).isDirectory()) {
        directoryPath = inputPath;
    }
    else {
        throw new Error(`Provided path is neither a directory nor a file: ${inputPath}`);
    }
    const files = fs
        .readdirSync(directoryPath)
        .map((file) => path.join(directoryPath, file));
    const program = ts.createProgram(files, {});
    const typeChecker = program.getTypeChecker();
    const results = files
        .map((file) => {
        if (file.endsWith(".ts")) {
            return extractFunctionDetailsFromFile(file, typeChecker);
        }
        return null;
    })
        .filter(Boolean)
        .flat();
    try {
        const transformedResults = {
            [type]: results.map((workflow) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                return ({
                    taskQueue,
                    name: workflow.workflowName,
                    type: "class",
                    input_schema: {
                        type: "object",
                        properties: (_b = (_a = workflow.inputType) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.reduce((acc, prop) => {
                            acc[prop.name] = {
                                type: prop.type === "any" ? undefined : prop.type,
                                anyOf: prop.type === "any" ? [{}, { type: "null" }] : undefined,
                                default: prop.type === "any" ? null : undefined,
                            };
                            return acc;
                        }, {}),
                        required: (_d = (_c = workflow.inputType) === null || _c === void 0 ? void 0 : _c.properties) === null || _d === void 0 ? void 0 : _d.filter((prop) => prop.type !== "any").map((prop) => prop.name),
                        title: (_e = workflow.inputType) === null || _e === void 0 ? void 0 : _e.name,
                    },
                    output_schema: workflow.outputType
                        ? {
                            type: "object",
                            properties: (_g = (_f = workflow.outputType) === null || _f === void 0 ? void 0 : _f.properties) === null || _g === void 0 ? void 0 : _g.reduce((acc, prop) => {
                                acc[prop.name] = {
                                    type: prop.type === "any" ? undefined : prop.type,
                                    anyOf: prop.type === "any" ? [{}, { type: "null" }] : undefined,
                                    default: prop.type === "any" ? null : undefined,
                                };
                                return acc;
                            }, {}),
                            required: (_j = (_h = workflow.outputType) === null || _h === void 0 ? void 0 : _h.properties) === null || _j === void 0 ? void 0 : _j.filter((prop) => prop.type !== "any").map((prop) => prop.name),
                            title: (_k = workflow.outputType) === null || _k === void 0 ? void 0 : _k.name,
                        }
                        : null,
                });
            }),
        };
        return transformedResults;
    }
    catch (e) {
        observability_1.logger.error("Error in getClasses", e);
        throw e;
    }
}
