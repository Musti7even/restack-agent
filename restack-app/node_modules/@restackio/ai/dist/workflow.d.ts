import { ActivityOptions, UntypedActivities, getExternalWorkflowHandle, workflowInfo, continueAsNew, sleep, ActivityInterfaceFor, WithWorkflowArgs, ChildWorkflowOptions, ChildWorkflowHandle, Workflow, WorkflowResultType, uuid4 } from "@temporalio/workflow";
import { WorkflowLogger } from "@temporalio/workflow/lib/logs";
export declare const customLog: WorkflowLogger;
export declare function addEngineIdPrefix(engineId: string, current: string): string;
export declare function getEngineIdFromClient(): string;
/**
 * Starts a child agent or workflow
 * @param child The workflow or agent to execute as a child.
 * @param childId The workflowId or agentId of the child.
 * @param input The input to pass to the child.
 * @returns A promise that resolves to a ChildHandle for the started child.
 */
export declare function childStart<T extends Workflow>({ child, childId, input, options, }: {
    child: T;
    childId: string;
    input?: unknown;
    options?: WithWorkflowArgs<T, ChildWorkflowOptions>;
}): Promise<ChildWorkflowHandle<T>>;
/**
 * Executes a child agent or workflow.
 * @param child The workflow or agent to execute as a child.
 * @param childId The workflowId or agentId of the child.
 * @param input The input to pass to the child.
 * @param options The options for the child.
 * @returns A promise that resolves to the result of the child.
 */
export declare function childExecute<T extends Workflow>({ child, childId, input, options, }: {
    child: T;
    childId: string;
    input?: unknown;
    options?: WithWorkflowArgs<T, ChildWorkflowOptions>;
}): Promise<WorkflowResultType<T>>;
/**
 * A single step within an agent or workflow.
 * @param options The function options to use.
 * @example
 * ```typescript
 * const function = step({
 *   taskQueue: "custom-queue"
 *   scheduleToCloseTimeout: "5 minutes",
 * });
 * ```
 * @returns A function interface used to invoke functions.
 */
export declare function step<A = UntypedActivities>(options: ActivityOptions): ActivityInterfaceFor<A>;
export { customLog as log, getExternalWorkflowHandle, workflowInfo, continueAsNew, sleep, uuid4 as uuid, };
