"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.step = exports.childExecute = exports.childStart = exports.uuid = exports.condition = exports.sleep = exports.continueAsNew = exports.agentInfo = exports.getExternalAgentHandle = exports.log = void 0;
exports.defineEvent = defineEvent;
exports.onEvent = onEvent;
exports.defineState = defineState;
exports.handleState = handleState;
const workflow_1 = require("@temporalio/workflow");
Object.defineProperty(exports, "getExternalAgentHandle", { enumerable: true, get: function () { return workflow_1.getExternalWorkflowHandle; } });
Object.defineProperty(exports, "agentInfo", { enumerable: true, get: function () { return workflow_1.workflowInfo; } });
Object.defineProperty(exports, "continueAsNew", { enumerable: true, get: function () { return workflow_1.continueAsNew; } });
Object.defineProperty(exports, "sleep", { enumerable: true, get: function () { return workflow_1.sleep; } });
Object.defineProperty(exports, "condition", { enumerable: true, get: function () { return workflow_1.condition; } });
Object.defineProperty(exports, "uuid", { enumerable: true, get: function () { return workflow_1.uuid4; } });
const workflow_2 = require("./workflow");
Object.defineProperty(exports, "log", { enumerable: true, get: function () { return workflow_2.customLog; } });
Object.defineProperty(exports, "childExecute", { enumerable: true, get: function () { return workflow_2.childExecute; } });
Object.defineProperty(exports, "childStart", { enumerable: true, get: function () { return workflow_2.childStart; } });
Object.defineProperty(exports, "step", { enumerable: true, get: function () { return workflow_2.step; } });
/**
 * Define an event for an Agent.
 *
 * A definition is used to register an event listener in the Agent via onEvent and to send an event to an Agent using sendAgentEvent.
 * A definition can be reused in multiple Agents.
 */
function defineEvent(name) {
    return (0, workflow_1.defineUpdate)(name);
}
/**
 * Set a listener for an event in an Agent.
 *
 * If this is called multiple times for a given event the last handler will overwrite any previous calls.
 *
 * @param def an event definition as returned by {@link defineEvent}.
 * @param handler a compatible handler function for the given definition or `undefined` to unset the handler.
 * @param options an optional `description` of the handler and an optional update `validator` function.
 */
function onEvent(def, handler, options) {
    (0, workflow_1.setHandler)(def, handler, options);
}
/**
 * Define a state method for an agent.
 *
 * A definition is used to register a handler in the Agent via {@link setHandler} and to query a Agent using a {@link AgentHandle}.
 * A definition can be reused in multiple Agents.
 */
function defineState(name) {
    return (0, workflow_1.defineQuery)(name);
}
/**
 * Set a handler function for an Agent state.
 *
 * If this function is called multiple times for a given state name the last handler will overwrite any previous calls.
 *
 * @param def a state definition as returned by {@link defineState}.
 * @param handler a compatible handler function for the given definition or `undefined` to unset the handler.
 * @param options an optional `description` of the handler and an optional update `validator` function.
 */
function handleState(def, handler, options) {
    (0, workflow_1.setHandler)(def, handler, options);
}
